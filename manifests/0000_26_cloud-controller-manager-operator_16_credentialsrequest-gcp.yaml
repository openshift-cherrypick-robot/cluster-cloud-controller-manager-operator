apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: openshift-gcp-ccm
  namespace: openshift-cloud-credential-operator
  annotations:
    capability.openshift.io/name: CloudCredential
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
spec:
  serviceAccountNames:
  - cloud-controller-manager
  secretRef:
    name: gcp-ccm-cloud-credentials
    namespace: openshift-cloud-controller-manager
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: GCPProviderSpec
    permissions:
    - "compute.networks.get"
    - "compute.networks.list"
    - "compute.networks.use"
    - "compute.zones.list"
    - "resourcemanager.projects.get"
    - "compute.subnetworks.list"
    - "compute.subnetworks.get"
    - "compute.subnetworks.use"
    - "compute.backendServices.create"
    - "compute.backendServices.delete"
    - "compute.backendServices.get"
    - "compute.backendServices.list"
    - "compute.backendServices.update"
    - "compute.backendServices.use"
    - "compute.disks.create"
    - "compute.disks.createSnapshot"
    - "compute.disks.delete"
    - "compute.disks.get"
    - "compute.disks.list"
    - "compute.disks.listEffectiveTags"
    - "compute.disks.listTagBindings"
    - "compute.disks.resize"
    - "compute.disks.setLabels"
    - "compute.disks.update"
    - "compute.disks.use"
    - "compute.disks.useReadOnly"
    - "compute.forwardingRules.create"
    - "compute.forwardingRules.delete"
    - "compute.forwardingRules.get"
    - "compute.forwardingRules.list"
    - "compute.forwardingRules.update"
    - "compute.forwardingRules.use"
    - "compute.instanceGroups.create"
    - "compute.instanceGroups.delete"
    - "compute.instanceGroups.get"
    - "compute.instanceGroups.list"
    - "compute.instanceGroups.update"
    - "compute.instanceGroups.use"
    - "compute.regionBackendServices.create"
    - "compute.regionBackendServices.delete"
    - "compute.regionBackendServices.get"
    - "compute.regionBackendServices.getIamPolicy"
    - "compute.regionBackendServices.list"
    - "compute.regionBackendServices.setIamPolicy"
    - "compute.regionBackendServices.setSecurityPolicy"
    - "compute.regionBackendServices.update"
    - "compute.regionBackendServices.use"
    - "compute.instances.attachDisk"
    - "compute.instances.create"
    - "compute.instances.createTagBinding"
    - "compute.instances.delete"
    - "compute.instances.deleteAccessConfig"
    - "compute.instances.deleteTagBinding"
    - "compute.instances.detachDisk"
    - "compute.instances.get"
    - "compute.instances.getEffectiveFirewalls"
    - "compute.instances.list"
    - "compute.instances.osAdminLogin"
    - "compute.instances.osLogin"
    - "compute.instances.reset"
    - "compute.instances.resume"
    - "compute.instances.setLabels"
    - "compute.instances.setMachineResources"
    - "compute.instances.setMachineType"
    - "compute.instances.setMetadata"
    - "compute.instances.setMinCpuPlatform"
    - "compute.instances.setName"
    - "compute.instances.setScheduling"
    - "compute.instances.setTags"
    - "compute.instances.start"
    - "compute.instances.startWithEncryptionKey"
    - "compute.instances.stop"
    - "compute.instances.suspend"
    - "compute.instances.update"
    - "compute.instances.use"
    - "compute.instances.useReadOnly"
    - "compute.zoneOperations.get"
    - "compute.zoneOperations.list"
    - "compute.zones.get"
    - "compute.zones.list"
    - "compute.projects.get"
    - "compute.regions.get"
    - "compute.regions.list"
    - "compute.targetPools.addInstance"
    - "compute.targetPools.create"
    - "compute.targetPools.delete"
    - "compute.targetPools.get"
    - "compute.targetPools.list"
    - "compute.targetPools.removeInstance"
    - "compute.targetPools.update"
    - "compute.targetPools.use"
    - "compute.networkEndpointGroups.attachNetworkEndpoints"
    - "compute.networkEndpointGroups.create"
    - "compute.networkEndpointGroups.delete"
    - "compute.networkEndpointGroups.detachNetworkEndpoints"
    - "compute.networkEndpointGroups.get"
    - "compute.networkEndpointGroups.list"
    - "compute.networkEndpointGroups.use"

    
    # If set to true, don't check whether the requested
    # roles have the necessary services enabled
    skipServiceCheck: true
